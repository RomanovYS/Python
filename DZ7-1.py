# 1). Отсортируйте по убыванию методом пузырька одномерный целочисленный массив, заданный случайными числами на
# промежутке [-100; 100). Выведите на экран исходный и отсортированный массивы.
# Примечания:
# ● алгоритм сортировки должен быть в виде функции, которая принимает на вход массив данных,
# ● постарайтесь сделать алгоритм умнее, но помните, что у вас должна остаться сортировка пузырьком.
# Улучшенные версии сортировки, например, расчёской, шейкерная и другие в зачёт не идут.
import random as rnd

N = 10  # количество элементов
arr = [(rnd.randint(-100, 99)) for _ in range(N)]
print(arr)


def bubble_sort(in_arr):  # для массива больше 2х элементов !!!!!!!!!!!!! (т.к. цикл не с нуля)
    iter_sum = 0
    for_loop = len(in_arr) - 1  # цикл будет до предпоследнего элемента
    end_flag = True  # для входа в цикл
    while end_flag:
        end_flag = False  # принудительное окончание цикла while... если ВДРУГ не случится обмена элементов
        for i in range(1, for_loop):  # делаем проход по массиву c первого, а не с нулевого элемента до предпоследнего
            # "мелкозубая расчёска" (расстояние равно 2)
            # if in_arr[i-1] < in_arr[i + 1]: # проверяем элементы по бокам от указателя
            #     arr[i-1], arr[i + 1] = arr[i + 1], arr[i-1]
            #     end_flag = True  # СЛУЧИЛОСЬ... есть обмен, пока не заканчиваем

            # для экономии итераций, сравниваем сначала "левые" соседние элементы, потом "правые"
            if in_arr[i - 1] < in_arr[i]:  # проверяем элементы слева
                arr[i - 1], arr[i] = arr[i], arr[i - 1]
                end_flag = True  # СЛУЧИЛОСЬ... есть обмен, пока не заканчиваем
            if in_arr[i] < in_arr[i + 1]:  # проверяем элементы справа
                arr[i], arr[i + 1] = arr[i + 1], arr[i]
                end_flag = True  # СЛУЧИЛОСЬ... есть обмен, пока не заканчиваем

        iter_sum += 1
        print('Итерация:', iter_sum)
    return in_arr


print(bubble_sort(arr))

# [28, 92, 82, 98, 58, 85, 70, -3, -33, 39]
# Итерация: 1
# Итерация: 2
# Итерация: 3
# Итерация: 4
# [98, 92, 85, 82, 70, 58, 39, 28, -3, -33]
